package tls

import (
	"github.com/chinaso/fabricGM/cryptopkg/golangGM/sm2"
	"testing"
)

// -------------------------------------------------------- //

var testSM2CertificateIssuer = fromHex("3081e530818c020100302a310d300b060355040a1304546573743119301706035504031310746573742e6578616d706c652e636f6d3059301306072a8648ce3d020106082a811ccf5501822d034200045487b42438d01ad3c5658c4b63a2c1395a521b7f8e4a88bc687320141837734b2930bad6fae48167e5414ef6cf86d35550da11d1ba35b997b6dae995a486848ba000300a06082a811ccf5501837503480030450220126b51049e0579262dc1a9442e9c66a4c9b0cadf8362cdc5b77464c7b718c2800221009a9962fcaf12f2c923adc458db05cc7416ab1f54364e1d87c27c2d8e3af8319f")

var testSM2Certificate = fromHex("3082040c308203b2a0030201020201ff300a06082a811ccf55018375304b3110300e060355040a13074368696e61736f3119301706035504031310746573742e6578616d706c652e636f6d310f300d060355042a1306476f70686572310b3009060355040613024e4c301e170d3730303130313030313634305a170d3730303130323033343634305a304b3110300e060355040a13074368696e61736f3119301706035504031310746573742e6578616d706c652e636f6d310f300d060355042a1306476f70686572310b3009060355040613024e4c3059301306072a8648ce3d020106082a811ccf5501822d03420004acd5635ca2a66003a550604b8295a93db393cb6a83bf1fd2efedf6d517635363391f09d460796b45054438ae79dc37770668cd156097e6a0f737da13559b142ba382028530820281300e0603551d0f0101ff04040302020430260603551d25041f301d06082b0601050507030206082b0601050507030106022a030603810b01300f0603551d130101ff040530030101ff305f06082b0601050507010104533051302306082b060105050730018617687474703a2f2f6f6373702e6578616d706c652e636f6d302a06082b06010505073002861e687474703a2f2f6372742e6578616d706c652e636f6d2f6361312e63727430620603551d11045b30598210746573742e6578616d706c652e636f6d8111676f7068657240676f6c616e672e6f726787047f000001871020014860000020010000000000000068861a68747470733a2f2f666f6f2e636f6d2f776962626c6523666f6f300f0603551d2004083006300406022a033081df0603551d1e0481d73081d4a061300e820c2e6578616d706c652e636f6d300d820b6578616d706c652e636f6d300a8708c0a80000ffff0000300a870801000000ff0000003011810f666f6f406578616d706c652e636f6d300a86082e6261722e636f6d300986076261722e636f6da16f3011820f6261722e6578616d706c652e636f6d3022872020010db8000000000000000000000000ffffffffffff00000000000000000000300e810c2e6578616d706c652e636f6d300d810b6578616d706c652e636f6d300b86092e626172322e636f6d300a8608626172322e636f6d30570603551d1f0450304e3025a023a021861f687474703a2f2f63726c312e6578616d706c652e636f6d2f6361312e63726c3025a023a021861f687474703a2f2f63726c322e6578616d706c652e636f6d2f6361312e63726c301606032a0304040f657874726120657874656e73696f6e300d0603551d0e0406040404030201300a06082a811ccf550183750348003045022100a7667ebd13bbd7c3e2814e1c17ec5531157597ebbf5479059711d42d06786ff4022017650cdaaa9cb694a45b9b2d8d551a47c372448d6099966e04c3b600152bd8d5")


var testSM2PrivateKey = &sm2.PrivateKey{
	PublicKey: sm2.PublicKey{
		Curve: sm2.SM2P256(),
		X:     bigFromString("78174834151452074284458950169417473418471403535674441993919726232875020014435"),
		Y:     bigFromString("25836672469640057491166628551391838254963386585053231364097657030833247818795"),
	},
	D: bigFromString("63367946123638628745588222248988438642683005431139394898092784341271293797041"),
}


// TestCipherSuiteCertPreferance ensures that we select an RSA ciphersuite with
// an RSA certificate and an ECDSA ciphersuite with an ECDSA certificate.
func TestCipherSuiteCertPreferenceSM2(t *testing.T) {
	config := testConfig.Clone()
	config.CipherSuites = []uint16{TLS_ECDHE_SM2_WITH_SM4_128_CBC_SM3}
	config.PreferServerCipherSuites = true

	test := &serverTest{
		name:   "CipherSuiteCertPreferenceSM2",
		config: config,
	}
	runServerTestTLS12(t, test)

	config = testConfig.Clone()
	config.CipherSuites = []uint16{TLS_ECDHE_SM2_WITH_SM4_128_CBC_SM3}
	config.Certificates = []Certificate{
		{
			Certificate: [][]byte{testSM2Certificate},
			PrivateKey:  testSM2PrivateKey,
		},
	}
	config.BuildNameToCertificate()
	config.PreferServerCipherSuites = true

	test = &serverTest{
		name:   "CipherSuiteCertPreferenceSM2",
		config: config,
	}
	runServerTestTLS12(t, test)
}
